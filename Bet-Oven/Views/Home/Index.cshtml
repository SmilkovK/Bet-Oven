@model SportDomain.models.LeagueMatchesViewModel
<div class="dashboard-container">
    <aside class="leagues-sidebar">
        <div class="sidebar-header">
            <h2>Leagues</h2>
            <div class="sidebar-actions">
                <button id="sort-alphabetical" title="Sort alphabetically">
                    <i class="fas fa-sort-alpha-down"></i>
                </button>
                <button id="show-favorites-only" title="Show favorites only">
                    <i class="fas fa-filter"></i>
                </button>
            </div>
        </div>

        @if (Model.Leagues != null && Model.Leagues.Any())
        {
            <div class="search-container">
                <input type="text" id="league-search" placeholder="Search leagues..." />
                <i class="fas fa-search search-icon"></i>
            </div>

            <div class="leagues-list" id="leagues-list">
                @foreach (var league in Model.Leagues)
                {
                    if (Model.FixturesGroupedByLeague.ContainsKey(league.League.Id))
                    {
                        <div class="league-card @(Model.FavoriteLeagues.Contains(league.League.Id) ? "is-favorite" : "")"
                             onclick="showMatches(@league.League.Id, '@Html.Raw(league.League.Name)')"
                             data-league-id="@league.League.Id"
                             data-league-name="@league.League.Name">
                            <div class="league-card-content">
                                <img src="@league.League.Logo" class="league-logo" alt="@league.League.Name" />
                                <span class="league-name">@league.League.Name</span>
                                <button class="favorite-btn @(Model.FavoriteLeagues.Contains(league.League.Id) ? "active" : "")"
                                        onclick="toggleFavorite(event, @league.League.Id)"
                                        title="@(Model.FavoriteLeagues.Contains(league.League.Id) ? "Remove from favorites" : "Add to favorites")">
                                    <i class="fas fa-star"></i>
                                </button>
                            </div>
                            <div class="match-count">
                                <span>@(Model.FixturesGroupedByLeague[league.League.Id].Count()) matches today</span>
                            </div>
                        </div>
                    }
                }
            </div>

            <div class="no-results hidden" id="no-results">
                <div class="empty-state">
                    <i class="fas fa-search fa-3x"></i>
                    <p>No leagues found</p>
                </div>
            </div>
        }
        else
        {
            <div class="empty-state">
                <i class="fas fa-trophy fa-3x"></i>
                <p>No leagues available at the moment</p>
                <button class="refresh-btn">Refresh</button>
            </div>
        }
    </aside>

    <main class="matches-container">
        <div class="matches-header">
            <div class="league-info">
                <h2 id="league-name">Select a league to view matches</h2>
                <span class="match-date" id="current-date"></span>
            </div>
            <div class="matches-actions">
                <div class="odds-format">
                    <span>Odds format:</span>
                    <select id="odds-format">
                        <option value="decimal" selected>Decimal</option>
                        <option value="fractional">Fractional</option>
                        <option value="american">American</option>
                    </select>
                </div>
                <button class="refresh-matches" id="refresh-matches" title="Refresh matches">
                    <i class="fas fa-sync-alt"></i>
                </button>
            </div>
        </div>

        <div class="matches-content">
            <div class="matches-legend">
                <span class="time-header">Time</span>
                <span class="team-header">Home</span>
                <div class="odds-header">
                    <span>1</span>
                    <span>X</span>
                    <span>2</span>
                </div>
                <span class="team-header">Away</span>
                <span class="more-header"></span>
            </div>

            <div class="match-list-wrapper">
                <div class="match-list" id="match-list">
                    <div class="initial-state">
                        <div class="empty-selection">
                            <i class="fas fa-hand-pointer fa-3x"></i>
                            <p>Select a league from the sidebar to view today's matches</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>
</div>

<!-- Favorite confirmation modal -->
<div class="modal-overlay hidden" id="favorite-modal-overlay">
    <div class="modal-content" id="favorite-modal">
        <div class="modal-header">
            <h3 id="modal-title">Confirm Action</h3>
            <button class="close-modal" onclick="closeModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <p id="popup-text"></p>
        </div>
        <div class="modal-footer">
            <button class="btn-secondary" onclick="confirmFavorite(false)">Cancel</button>
            <button class="btn-primary" onclick="confirmFavorite(true)">Confirm</button>
        </div>
    </div>
</div>

<!-- Toast notification -->
<div class="toast-container" id="toast-container"></div>

<!-- Loading spinner overlay -->
<div class="loading-overlay hidden" id="loading-overlay">
    <div class="loading-spinner"></div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/js/all.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Set current date
        const today = new Date();
        const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
        document.getElementById('current-date').textContent = today.toLocaleDateString('en-US', options);

        // Init search functionality
        initSearch();

        
        autoSelectFirstFavoriteLeague();
    });
        function autoSelectFirstFavoriteLeague() {
        if (favoriteLeagues.length > 0) {
            const firstFavoriteLeagueId = favoriteLeagues[0];
            const firstFavoriteLeagueCard = document.querySelector(`.league-card[data-league-id="${firstFavoriteLeagueId}"]`);

            if (firstFavoriteLeagueCard) {
                const leagueName = firstFavoriteLeagueCard.getAttribute('data-league-name');
                showMatches(firstFavoriteLeagueId, leagueName);
            }
        }
    }
    let favoriteLeagues = @Html.Raw(Json.Serialize(Model.FavoriteLeagues));
    let pendingFavoriteAction = null;
    let currentOddsFormat = 'decimal';

    function initSearch() {
        const searchInput = document.getElementById('league-search');
        const leagueCards = document.querySelectorAll('.league-card');
        const noResults = document.getElementById('no-results');

        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase().trim();
            let matchCount = 0;

            leagueCards.forEach(card => {
                const leagueName = card.getAttribute('data-league-name').toLowerCase();
                if (leagueName.includes(searchTerm)) {
                    card.classList.remove('hidden');
                    matchCount++;
                } else {
                    card.classList.add('hidden');
                }
            });

            if (matchCount === 0) {
                noResults.classList.remove('hidden');
            } else {
                noResults.classList.add('hidden');
            }
        });

        // Sort alphabetically
        document.getElementById('sort-alphabetical').addEventListener('click', function() {
            const leaguesList = document.getElementById('leagues-list');
            const cards = Array.from(leaguesList.children);

            cards.sort((a, b) => {
                const nameA = a.getAttribute('data-league-name').toLowerCase();
                const nameB = b.getAttribute('data-league-name').toLowerCase();
                return nameA.localeCompare(nameB);
            });

            cards.forEach(card => leaguesList.appendChild(card));

            showToast('Leagues sorted alphabetically', 'info');
        });

        // Show favorites only
        const favButton = document.getElementById('show-favorites-only');
        favButton.addEventListener('click', function() {
            this.classList.toggle('active');
            const showFavoritesOnly = this.classList.contains('active');

            leagueCards.forEach(card => {
                if (showFavoritesOnly && !card.classList.contains('is-favorite')) {
                    card.classList.add('hidden');
                } else {
                    card.classList.remove('hidden');
                }
            });

            showToast(showFavoritesOnly ? 'Showing favorites only' : 'Showing all leagues', 'info');
        });
    }

    function showMatches(leagueId, leagueName) {
        console.log("Loading matches for:", leagueName);

        let leagueNameElement = document.getElementById("league-name");
        let matchContainer = document.getElementById("match-list");

        leagueNameElement.textContent = leagueName;

        // Show loading state
        document.getElementById('loading-overlay').classList.remove('hidden');
        matchContainer.innerHTML = "";

        // Highlight selected league
        document.querySelectorAll('.league-card').forEach(card => {
            card.classList.remove('selected');
        });
        document.querySelector(`.league-card[data-league-id="${leagueId}"]`).classList.add('selected');

        let fixtures = @Html.Raw(Json.Serialize(Model.FixturesGroupedByLeague));

        setTimeout(() => {
            document.getElementById('loading-overlay').classList.add('hidden');

            if (!fixtures[leagueId] || fixtures[leagueId].length === 0) {
                matchContainer.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-calendar-times fa-3x"></i>
                        <p>No matches available for this league today</p>
                    </div>
                `;
                return;
            }

            let matchesHtml = fixtures[leagueId].map(fixture => {
                const matchTime = new Date(fixture.date).toLocaleTimeString([], {
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: true
                });

                let bet365 = fixture.odds?.bookmakers?.find(b => b.id === 8);
                let matchWinnerOdds = bet365?.bets?.find(bet => bet.id === 1);

                let homeWin = matchWinnerOdds?.values?.find(v => v.value === "Home")?.odd ?? 'N/A';
                let draw = matchWinnerOdds?.values?.find(v => v.value === "Draw")?.odd ?? 'N/A';
                let awayWin = matchWinnerOdds?.values?.find(v => v.value === "Away")?.odd ?? 'N/A';

                if (currentOddsFormat !== 'decimal') {
                    homeWin = formatOdds(homeWin, currentOddsFormat);
                    draw = formatOdds(draw, currentOddsFormat);
                    awayWin = formatOdds(awayWin, currentOddsFormat);
                }

                const isLive = fixture.status?.short === 'LIVE';
                const elapsed = fixture.status?.elapsed ?? 0;
                const hasStarted = new Date(fixture.date) < new Date();

                return `
                    <div class='match-card ${isLive ? 'live-match' : ''} ${hasStarted ? 'started' : ''}'>
                        <div class="match-time ${isLive ? 'live' : ''}">
                                ${isLive ? `<span class="live-indicator">LIVE ${elapsed}'</span>` : matchTime}
                        </div>

                        <div class="team home-team">
                            <img class="team-logo" src="${fixture.teams.home.logo}" alt="${fixture.teams.home.name}" onerror="this.src='https://via.placeholder.com/30?text=?'" />
                            <span class="team-name">${fixture.teams.home.name}</span>
                        </div>

                        <div class="match-odds">
                            <button class="odd-btn" onclick="placeBet(${fixture.id}, 'home', '${homeWin}')">
                                <span class="odd-value">${homeWin}</span>
                            </button>
                            <button class="odd-btn" onclick="placeBet(${fixture.id}, 'draw', '${draw}')">
                                <span class="odd-value">${draw}</span>
                            </button>
                            <button class="odd-btn" onclick="placeBet(${fixture.id}, 'away', '${awayWin}')">
                                <span class="odd-value">${awayWin}</span>
                            </button>
                        </div>

                        <div class="team away-team">
                            <span class="team-name">${fixture.teams.away.name}</span>
                            <img class="team-logo" src="${fixture.teams.away.logo}" alt="${fixture.teams.away.name}" onerror="this.src='https://via.placeholder.com/30?text=?'" />
                        </div>

                        <div class="match-actions">
                            <button class="more-odds-btn" onclick="showMoreOdds(${fixture.id})">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                    </div>
                `;
            }).join("");

            matchContainer.innerHTML = matchesHtml;
        }, 500);
    }

    function formatOdds(odds, format) {
        if (odds === 'N/A') return odds;

        const decimalOdds = parseFloat(odds);

        if (format === 'fractional') {
            // Convert decimal to fractional
            const decimal = decimalOdds - 1;
            let numerator = Math.round(decimal * 100);
            let denominator = 100;
            const gcd = findGCD(numerator, denominator);

            return `${numerator/gcd}/${denominator/gcd}`;
        } else if (format === 'american') {
            // Convert decimal to American
            if (decimalOdds >= 2) {
                return `+${Math.round((decimalOdds - 1) * 100)}`;
            } else {
                return `${Math.round(-100 / (decimalOdds - 1))}`;
            }
        }

        return odds;
    }

    function findGCD(a, b) {
        return b ? findGCD(b, a % b) : a;
    }

    // Odds format switcher
    document.getElementById('odds-format').addEventListener('change', function() {
        currentOddsFormat = this.value;
        const activeLeague = document.querySelector('.league-card.selected');

        if (activeLeague) {
            const leagueId = activeLeague.getAttribute('data-league-id');
            const leagueName = activeLeague.getAttribute('data-league-name');
            showMatches(leagueId, leagueName);

            showToast(`Odds format changed to ${currentOddsFormat}`, 'info');
        }
    });

    function toggleFavorite(event, leagueId) {
        event.stopPropagation();
        pendingFavoriteAction = leagueId;

        const leagueCard = document.querySelector(`.league-card[data-league-id="${leagueId}"]`);
        const leagueName = leagueCard.getAttribute('data-league-name');
        let isFavorite = favoriteLeagues.includes(leagueId);

        document.getElementById("popup-text").textContent = isFavorite ?
            `Remove ${leagueName} from your favorites?` :
            `Add ${leagueName} to your favorites?`;

        document.getElementById("modal-title").textContent = isFavorite ?
            "Remove from Favorites" : "Add to Favorites";

        document.getElementById("favorite-modal-overlay").classList.remove("hidden");
    }

    function confirmFavorite(confirmed) {
        if (!confirmed || pendingFavoriteAction === null) {
            closeModal();
            return;
        }

        const leagueCard = document.querySelector(`.league-card[data-league-id="${pendingFavoriteAction}"]`);
        const leagueName = leagueCard.getAttribute('data-league-name');
        const isFavorite = favoriteLeagues.includes(pendingFavoriteAction);

        document.getElementById('loading-overlay').classList.remove('hidden');

        fetch(`/ToggleFavorite?leagueId=${pendingFavoriteAction}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            document.getElementById('loading-overlay').classList.add('hidden');

            if (data.success) {
                console.log("Favorite leagues updated:", data.favoriteLeagues);
                favoriteLeagues = data.favoriteLeagues;

                let starIcon = document.querySelector(`.league-card[data-league-id="${pendingFavoriteAction}"] .favorite-btn`);
                let leagueCard = document.querySelector(`.league-card[data-league-id="${pendingFavoriteAction}"]`);

                if (starIcon) {
                    starIcon.classList.toggle("active", data.favoriteLeagues.includes(pendingFavoriteAction));
                    leagueCard.classList.toggle("is-favorite", data.favoriteLeagues.includes(pendingFavoriteAction));

                    starIcon.setAttribute('title', data.favoriteLeagues.includes(pendingFavoriteAction) ?
                        'Remove from favorites' : 'Add to favorites');
                }

                showToast(
                    isFavorite ?
                    `${leagueName} removed from favorites` :
                    `${leagueName} added to favorites`,
                    'success'
                );

                const showFavoritesOnly = document.getElementById('show-favorites-only').classList.contains('active');
                if (showFavoritesOnly && !data.favoriteLeagues.includes(pendingFavoriteAction)) {
                    leagueCard.classList.add('hidden');
                }
            }
        })
        .catch(error => {
            document.getElementById('loading-overlay').classList.add('hidden');
            console.error('Error toggling favorite:', error);
            showToast('Failed to update favorites', 'error');
        });

        closeModal();
    }

    function closeModal() {
        document.getElementById("favorite-modal-overlay").classList.add("hidden");
    }

    function showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        toast.innerHTML = `
            <div class="toast-icon">
                <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
            </div>
            <div class="toast-message">${message}</div>
        `;

        const container = document.getElementById('toast-container');
        container.appendChild(toast);
        setTimeout(() => {
            toast.classList.add('show');
        }, 10);

        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => {
                container.removeChild(toast);
            }, 300);
        }, 3000);
    }

    function placeBet(fixtureId, type, odds) {
        showToast(`Bet ${type} placed on match #${fixtureId} with odds ${odds}`, 'success');
            }

    function showMoreOdds(fixtureId) {
        showToast(`More betting options for match #${fixtureId}`, 'info');
    }

    document.getElementById('refresh-matches').addEventListener('click', function() {
        const activeLeague = document.querySelector('.league-card.selected');

        if (activeLeague) {
            const leagueId = activeLeague.getAttribute('data-league-id');
            const leagueName = activeLeague.getAttribute('data-league-name');

            this.classList.add('spinning');

            setTimeout(() => {
                showMatches(leagueId, leagueName);
                this.classList.remove('spinning');
                showToast('Matches refreshed', 'success');
            }, 1000);
        } else {
            showToast('Select a league first', 'info');
        }
    });
</script>

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Inter', 'SF Pro Display', -apple-system, BlinkMacSystemFont, sans-serif;
    }

    :root {
        --primary-color: #3a86ff;
        --primary-light: #4895ef;
        --primary-dark: #2563eb;
        --primary-hover: #2563eb;
        --bg-dark: #0f172a;
        --bg-medium: #1e293b;
        --bg-light: #334155;
        --bg-hover: #1e293b;
        --text-light: #f8fafc;
        --text-medium: #cbd5e1;
        --text-dim: #94a3b8;
        --accent-success: #10b981;
        --accent-warning: #f59e0b;
        --accent-danger: #ef4444;
        --accent-info: #3b82f6;
        /* Favorites */
        --favorite-color: #fbbf24;
        /* Border radius */
        --radius-sm: 4px;
        --radius-md: 8px;
        --radius-lg: 12px;
        /* Shadows */
        --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.2);
        --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.1);
        --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.1);
        --shadow-glow: 0 0 15px rgba(58, 134, 255, 0.5);
    }

    body {
        background-color: var(--bg-dark);
        color: var(--text-light);
        line-height: 1.5;
        font-size: 16px;
    }

    .hidden {
        display: none !important;
    }

    button {
        cursor: pointer;
        border: none;
        background: none;
        transition: all 0.2s ease;
    }

    /* Layout */
    .dashboard-container {
        display: flex;
        min-height: 100vh;
        position: relative;
        max-width: 1600px;
        margin: 0 auto;
        border-radius: var(--radius-lg);
        overflow: hidden;
        box-shadow: var(--shadow-lg);
    }

    .leagues-sidebar {
        width: 330px;
        background-color: var(--bg-medium);
        border-right: 1px solid rgba(255, 255, 255, 0.05);
        display: flex;
        flex-direction: column;
        transition: all 0.3s ease;
        overflow: hidden;
        flex-shrink: 0;
    }

    .sidebar-header {
        padding: 24px 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: rgba(0, 0, 0, 0.1);
        border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    }

        .sidebar-header h2 {
            font-size: 22px;
            font-weight: 600;
            letter-spacing: -0.5px;
        }

    .sidebar-actions {
        display: flex;
        gap: 10px;
    }

        .sidebar-actions button {
            width: 36px;
            height: 36px;
            border-radius: var(--radius-md);
            color: var(--text-medium);
            background-color: rgba(255, 255, 255, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
        }

            .sidebar-actions button:hover {
                background-color: var(--primary-color);
                color: var(--text-light);
            }

            .sidebar-actions button.active {
                background-color: var(--primary-color);
                color: var(--text-light);
            }

    .search-container {
        padding: 16px 20px;
        position: relative;
        background-color: rgba(0, 0, 0, 0.1);
    }

        .search-container input {
            width: 100%;
            padding: 12px 16px 12px 40px;
            border-radius: var(--radius-md);
            border: 1px solid rgba(255, 255, 255, 0.1);
            background-color: rgba(0, 0, 0, 0.2);
            color: var(--text-light);
            font-size: 14px;
            transition: all 0.3s ease;
        }

            .search-container input:focus {
                outline: none;
                border-color: var(--primary-light);
                box-shadow: 0 0 0 2px rgba(67, 97, 238, 0.3);
            }

    .search-icon {
        position: absolute;
        left: 34px;
        top: 50%;
        transform: translateY(-50%);
        color: var(--text-dim);
        pointer-events: none;
    }

    .leagues-list {
        overflow-y: auto;
        flex-grow: 1;
        padding: 16px;
        scrollbar-width: thin;
        scrollbar-color: var(--bg-light) transparent;
    }

        .leagues-list::-webkit-scrollbar {
            width: 6px;
        }

        .leagues-list::-webkit-scrollbar-track {
            background: transparent;
        }

        .leagues-list::-webkit-scrollbar-thumb {
            background-color: var(--bg-light);
            border-radius: 6px;
        }

    .league-card {
        margin-bottom: 12px;
        border-radius: var(--radius-md);
        background-color: rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
        overflow: hidden;
        box-shadow: var(--shadow-sm);
        cursor: pointer;
        border-left: 3px solid transparent;
    }

        .league-card:hover {
            background-color: rgba(0, 0, 0, 0.3);
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

        .league-card.selected {
            border-left: 3px solid var(--primary-color);
            background-color: rgba(58, 134, 255, 0.15);
            box-shadow: var(--shadow-glow);
        }

        .league-card.is-favorite {
            border-left: 3px solid var(--favorite-color);
        }

    .league-card-content {
        display: flex;
        align-items: center;
        padding: 14px 16px;
    }

    .league-logo {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        object-fit: contain;
        background-color: rgba(255, 255, 255, 0.05);
        padding: 4px;
        margin-right: 14px;
    }

    .league-name {
        flex: 1;
        font-weight: 500;
        font-size: 15px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .favorite-btn {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--text-dim);
        opacity: 0.5;
        transition: all 0.2s ease;
    }

    .league-card:hover .favorite-btn {
        opacity: 1;
    }

    .favorite-btn:hover {
        background-color: rgba(255, 255, 255, 0.1);
        color: var(--favorite-color);
        transform: scale(1.1);
    }

    .favorite-btn.active {
        color: var(--favorite-color);
        opacity: 1;
    }

    .match-count {
        background-color: rgba(0, 0, 0, 0.2);
        padding: 8px 16px;
        font-size: 13px;
        color: var(--text-dim);
        letter-spacing: 0.3px;
    }

    .empty-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 40px 20px;
        text-align: center;
        color: var(--text-dim);
    }

        .empty-state i {
            margin-bottom: 20px;
            opacity: 0.7;
        }

        .empty-state p {
            margin-bottom: 20px;
            font-size: 15px;
        }

    .refresh-btn {
        padding: 10px 20px;
        background-color: var(--primary-color);
        color: var(--text-light);
        border-radius: var(--radius-md);
        font-weight: 500;
        font-size: 14px;
        transition: all 0.2s ease;
    }

        .refresh-btn:hover {
            background-color: var(--primary-hover);
            transform: translateY(-2px);
        }

    .matches-container {
        flex: 1;
        display: flex;
        flex-direction: column;
        background-color: var(--bg-dark);
        overflow: hidden;
    }

    .matches-header {
        padding: 24px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: rgba(0, 0, 0, 0.2);
        border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    }

    .league-info h2 {
        font-size: 22px;
        font-weight: 600;
        margin-bottom: 4px;
        letter-spacing: -0.5px;
    }

    .match-date {
        font-size: 14px;
        color: var(--text-dim);
    }

    .matches-actions {
        display: flex;
        align-items: center;
        gap: 20px;
    }

    .odds-format {
        display: flex;
        align-items: center;
        gap: 10px;
        font-size: 14px;
        color: var(--text-dim);
    }

        .odds-format select {
            padding: 8px 12px;
            background-color: rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: var(--radius-md);
            color: var(--text-light);
            cursor: pointer;
        }

    .refresh-matches {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: rgba(0, 0, 0, 0.2);
        color: var(--text-medium);
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
    }

        .refresh-matches:hover {
            background-color: var(--primary-color);
            color: var(--text-light);
        }

        .refresh-matches.spinning i {
            animation: spin 1s linear infinite;
        }

    

    .matches-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    .matches-legend {
        display: grid;
        grid-template-columns: 80px 1fr 180px 1fr 50px;
        gap: 10px;
        padding: 14px 24px;
        background-color: rgba(0, 0, 0, 0.1);
        border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    }

        .matches-legend span {
            font-size: 13px;
            font-weight: 500;
            color: var(--text-dim);
            text-transform: uppercase;
            letter-spacing: 1px;
        }

    .odds-header {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        text-align: center;
    }

    .match-list-wrapper {
        flex: 1;
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: var(--bg-light) transparent;
    }

        .match-list-wrapper::-webkit-scrollbar {
            width: 6px;
        }

        .match-list-wrapper::-webkit-scrollbar-track {
            background: transparent;
        }

        .match-list-wrapper::-webkit-scrollbar-thumb {
            background-color: var(--bg-light);
            border-radius: 6px;
        }

    .match-list {
        padding: 16px 24px;
    }

    .match-card {
        display: grid;
        grid-template-columns: 80px 1fr 180px 1fr 50px;
        gap: 10px;
        padding: 16px;
        margin-bottom: 12px;
        border-radius: var(--radius-md);
        background-color: rgba(0, 0, 0, 0.2);
        align-items: center;
        transition: all 0.2s ease;
    }

        .match-card:hover {
            background-color: rgba(0, 0, 0, 0.3);
            transform: translateY(-2px);
        }

        .match-card.live-match {
            border-left: 3px solid var(--accent-danger);
            background-color: rgba(239, 68, 68, 0.1);
        }

        .match-card.started {
            opacity: 0.7;
        }

    .match-time {
        font-size: 14px;
        font-weight: 500;
        color: var(--text-medium);
    }

        .match-time.live {
            color: var(--accent-danger);
        }

    .live-indicator {
        background-color: var(--accent-danger);
        padding: 2px 6px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: bold;
        animation: pulse 1.5s infinite;
    }

    .team {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .team-logo {
        width: 24px;
        height: 24px;
        object-fit: contain;
    }

    .team-name {
        font-size: 15px;
        font-weight: 500;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .away-team {
        justify-content: flex-end;
        text-align: right;
    }

    .match-odds {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 8px;
    }

    .odd-btn {
        padding: 8px 5px;
        background-color: rgba(255, 255, 255, 0.05);
        border-radius: var(--radius-sm);
        transition: all 0.2s ease;
    }

        .odd-btn:hover {
            background-color: var(--primary-color);
        }

    .odd-value {
        font-size: 14px;
        font-weight: 600;
    }

    .more-odds-btn {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background-color: rgba(255, 255, 255, 0.05);
        color: var(--text-medium);
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .more-odds-btn:hover {
            background-color: var(--bg-light);
            color: var(--text-light);
        }

    .initial-state, .empty-selection {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 40px;
        text-align: center;
        height: 100%;
        color: var(--text-dim);
    }

        .empty-selection i {
            margin-bottom: 20px;
            opacity: 0.7;
        }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(5px);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background-color: var(--bg-medium);
        border-radius: var(--radius-lg);
        width: 90%;
        max-width: 450px;
        box-shadow: var(--shadow-lg);
        overflow: hidden;
    }

    .modal-header {
        padding: 16px 24px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    }

        .modal-header h3 {
            font-size: 18px;
            font-weight: 600;
        }

    .close-modal {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--text-medium);
    }

        .close-modal:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: var(--text-light);
        }

    .modal-body {
        padding: 24px;
    }

    .modal-footer {
        padding: 16px 24px;
        display: flex;
        justify-content: flex-end;
        gap: 12px;
        background-color: rgba(0, 0, 0, 0.1);
    }

    .btn-primary, .btn-secondary {
        padding: 10px 20px;
        border-radius: var(--radius-md);
        font-weight: 500;
        transition: all 0.2s ease;
        font-size: 14px;
    }

    .btn-primary {
        background-color: var(--primary-color);
        color: var(--text-light);
    }

        .btn-primary:hover {
            background-color: var(--primary-hover);
        }

    .btn-secondary {
        background-color: rgba(255, 255, 255, 0.1);
        color: var(--text-medium);
    }

        .btn-secondary:hover {
            background-color: rgba(255, 255, 255, 0.2);
            color: var(--text-light);
        }

    /* Toast notifications */
    .toast-container {
        position: fixed;
        bottom: 20px;
        right: 20px;
        display: flex;
        flex-direction: column;
        gap: 10px;
        z-index: 1000;
    }

    .toast {
        min-width: 300px;
        padding: 16px;
        background-color: var(--bg-medium);
        border-radius: var(--radius-md);
        display: flex;
        align-items: center;
        gap: 12px;
        box-shadow: var(--shadow-lg);
        transform: translateX(120%);
        opacity: 0;
        transition: all 0.3s cubic-bezier(0.68, -0.55, 0.27, 1.55);
    }

        .toast.show {
            transform: translateX(0);
            opacity: 1;
        }

    .toast-success {
        border-left: 4px solid var(--accent-success);
    }

    .toast-error {
        border-left: 4px solid var(--accent-danger);
    }

    .toast-info {
        border-left: 4px solid var(--accent-info);
    }

    .toast-icon {
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .toast-success .toast-icon {
        color: var(--accent-success);
    }

    .toast-error .toast-icon {
        color: var(--accent-danger);
    }

    .toast-info .toast-icon {
        color: var(--accent-info);
    }

    .toast-message {
        font-size: 14px;
    }

    /* Loading overlay */
    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.7);
        backdrop-filter: blur(3px);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 999;
    }

    .loading-spinner {
        width: 48px;
        height: 48px;
        border: 4px solid rgba(255, 255, 255, 0.1);
        border-radius: 50%;
        border-top-color: var(--primary-color);
        animation: spin 1s linear infinite;
    }

    /* Responsive styles */
    @@ media screen and (max-width: 1024px) {
        .leagues-sidebar

    {
        width: 280px;
    }

    .matches-legend {
        grid-template-columns: 60px 1fr 150px 1fr 40px;
    }

    .match-card {
        grid-template-columns: 60px 1fr 150px 1fr 40px;
    }

    } 

    @@ media screen and (max-width: 768px) {
        .dashboard-container

    {
        flex-direction: column;
        height: 100vh;
    }

    .leagues-sidebar {
        width: 100%;
        height: 50vh;
    }

    .matches-container {
        height: 50vh;
    }

    } 
</style>