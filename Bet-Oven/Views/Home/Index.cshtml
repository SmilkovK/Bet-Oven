@model SportDomain.models.LeagueMatchesViewModel
@using Microsoft.AspNetCore.Identity
@using SportDomain.Identity
@inject SignInManager<BetUser> SignInManager
@inject UserManager<BetUser> UserManager
@{
    var isUserLoggedIn = SignInManager.IsSignedIn(User);
    BetUser currentUser = null;
    if (isUserLoggedIn)
    {
        currentUser = await UserManager.GetUserAsync(User);
    }
}
@section Styles {
    <link rel="stylesheet" href="~/css/indexCss.css" />
}
<div class="dashboard-container">
    <aside class="leagues-sidebar">
        <div class="sidebar-header">
            <h2>Leagues</h2>
            <div class="sidebar-actions">
                <button id="sort-alphabetical" title="Sort alphabetically">
                    <i class="fas fa-sort-alpha-down"></i>
                </button>
                <button id="show-favorites-only" title="Show favorites only">
                    <i class="fas fa-filter"></i>
                </button>
            </div>
        </div>

        @if (Model.Leagues != null && Model.Leagues.Any())
        {
            <div class="search-container">
                <input type="text" id="league-search" placeholder="Search leagues..." />
                <i class="fas fa-search search-icon"></i>
            </div>

            <div class="leagues-list" id="leagues-list">
                @foreach (var league in Model.Leagues)
                {
                    if (Model.FixturesGroupedByLeague.ContainsKey(league.League.Id))
                    {
                        <div class="league-card @(Model.FavoriteLeagues.Contains(league.League.Id) ? "is-favorite" : "")"
                             onclick="showMatches(@league.League.Id, '@Html.Raw(league.League.Name)')"
                             data-league-id="@league.League.Id"
                             data-league-name="@league.League.Name">
                            <div class="league-card-content">
                                <img src="@league.League.Logo" class="league-logo" alt="@league.League.Name" />
                                <span class="league-name">@league.League.Name</span>
                                <button class="favorite-btn @(Model.FavoriteLeagues.Contains(league.League.Id) ? "active" : "")"
                                        onclick="toggleFavorite(event, @league.League.Id)"
                                        title="@(Model.FavoriteLeagues.Contains(league.League.Id) ? "Remove from favorites" : "Add to favorites")">
                                    <i class="fas fa-star"></i>
                                </button>
                            </div>
                            <div class="match-count">
                                <span>@(Model.FixturesGroupedByLeague[league.League.Id].Count()) matches today</span>
                            </div>
                        </div>
                    }
                }
            </div>

            <div class="no-results hidden" id="no-results">
                <div class="empty-state">
                    <i class="fas fa-search fa-3x"></i>
                    <p>No leagues found</p>
                </div>
            </div>
        }
        else
        {
            <div class="empty-state">
                <i class="fas fa-trophy fa-3x"></i>
                <p>No leagues available at the moment</p>
                <button class="refresh-btn">Refresh</button>
            </div>
        }
    </aside>

    <main class="matches-container">
        <div class="matches-header">
            <div class="league-info">
                <h2 id="league-name">Select a league to view matches</h2>
                <span class="match-date" id="current-date"></span>
            </div>
            <div class="matches-actions">
                <div class="odds-format">
                    <span>Odds format:</span>
                    <select id="odds-format">
                        <option value="decimal" selected>Decimal</option>
                        <option value="fractional">Fractional</option>
                        <option value="american">American</option>
                    </select>
                </div>
                <button class="refresh-matches" id="refresh-matches" title="Refresh matches">
                    <i class="fas fa-sync-alt"></i>
                </button>
            </div>
        </div>

        <div class="matches-content">
            <div class="matches-legend">
                <span class="time-header">Time</span>
                <span class="team-header">Home</span>
                <div class="odds-header">
                    <span>1</span>
                    <span>X</span>
                    <span>2</span>
                </div>
                <span class="team-header">Away</span>
                <span class="more-header"></span>
            </div>

            <div class="match-list-wrapper">
                <div class="match-list" id="match-list">
                    <div class="initial-state">
                        <div class="empty-selection">
                            <i class="fas fa-hand-pointer fa-3x"></i>
                            <p>Select a league from the sidebar to view today's matches</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>
    <aside class="bets-sidebar" id="bets-sidebar">
        <div class="bets-header">
            <h2>Current Bets</h2>
            <button class="clear-bets" id="clear-all-bets" title="Clear all bets">
                <i class="fas fa-trash"></i>
            </button>
        </div>
        <div class="bets-list" id="bets-list">
            <div class="empty-bets">
                <i class="fas fa-ticket-alt fa-2x"></i>
                <p>No active bets</p>
            </div>
        </div>
        <div class="bets-footer hidden" id="bets-footer">
            <div class="total-stake">
                <span>Total Stake:</span>
                <input type="number" id="total-stake" min="1" value="10" step="5">
            </div>
            <div class="potential-win">
                <span>Potential Win:</span>
                <span id="potential-win">0.00</span>
            </div>
            <button class="place-bet-btn" id="place-bet-btn">Place Bet</button>
        </div>
    </aside>
</div>

<div class="modal-overlay hidden" id="favorite-modal-overlay">
    <div class="modal-content" id="favorite-modal">
        <div class="modal-header">
            <h3 id="modal-title">Confirm Action</h3>
            <button class="close-modal" onclick="closeModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <p id="popup-text"></p>
        </div>
        <div class="modal-footer">
            <button class="btn-secondary" onclick="confirmFavorite(false)">Cancel</button>
            <button class="btn-primary" onclick="confirmFavorite(true)">Confirm</button>
        </div>
    </div>
</div>

<div class="toast-container" id="toast-container"></div>

<div class="loading-overlay hidden" id="loading-overlay">
    <div class="loading-spinner"></div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/js/all.min.js"></script>
<script>
    let currentBets = [];
    let isUserLoggedIn = @Json.Serialize(isUserLoggedIn);
    let fixturesData = @Html.Raw(Json.Serialize(Model.FixturesGroupedByLeague));
    let favoriteLeagues = @Html.Raw(Json.Serialize(Model.FavoriteLeagues));
    let pendingFavoriteAction = null;
    let currentOddsFormat = 'decimal';

    function findGCD(a, b) {
        return b ? findGCD(b, a % b) : a;
    }

    function formatOdds(odds, format) {
        if (odds === 'N/A') return odds;

        const decimalOdds = parseFloat(odds);

        if (format === 'fractional') {
            const decimal = decimalOdds - 1;
            let numerator = Math.round(decimal * 100);
            let denominator = 100;
            const gcd = findGCD(numerator, denominator);

            return `${numerator / gcd}/${denominator / gcd}`;
        } else if (format === 'american') {
            if (decimalOdds >= 2) {
                return `+${Math.round((decimalOdds - 1) * 100)}`;
            } else {
                return `${Math.round(-100 / (decimalOdds - 1))}`;
            }
        }

        return odds;
    }

    function showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        toast.innerHTML = `
            <div class="toast-icon">
                <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
            </div>
            <div class="toast-message">${message}</div>
        `;

        const container = document.getElementById('toast-container');
        container.appendChild(toast);
        setTimeout(() => {
            toast.classList.add('show');
        }, 10);

        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => {
                container.removeChild(toast);
            }, 300);
        }, 3000);
    }

    function closeModal() {
        document.getElementById("favorite-modal-overlay").classList.add("hidden");
        pendingFavoriteAction = null;
    }

    function toggleFavorite(event, leagueId) {
        event.stopPropagation();
        pendingFavoriteAction = leagueId;

        const leagueCard = document.querySelector(`.league-card[data-league-id="${leagueId}"]`);
        const leagueName = leagueCard.getAttribute('data-league-name');
        let isFavorite = favoriteLeagues.includes(leagueId);

        document.getElementById("popup-text").textContent = isFavorite ?
            `Remove ${leagueName} from your favorites?` :
            `Add ${leagueName} to your favorites?`;

        document.getElementById("modal-title").textContent = isFavorite ?
            "Remove from Favorites" : "Add to Favorites";

        document.getElementById("favorite-modal-overlay").classList.remove("hidden");
    }

    function confirmFavorite(confirmed) {
        if (!confirmed || pendingFavoriteAction === null) {
            closeModal();
            return;
        }

        const leagueCard = document.querySelector(`.league-card[data-league-id="${pendingFavoriteAction}"]`);
        const leagueName = leagueCard.getAttribute('data-league-name');
        const isFavorite = favoriteLeagues.includes(pendingFavoriteAction);

        document.getElementById('loading-overlay').classList.remove('hidden');

        fetch(`/ToggleFavorite?leagueId=${pendingFavoriteAction}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                document.getElementById('loading-overlay').classList.add('hidden');

                if (data.success) {
                    favoriteLeagues = data.favoriteLeagues;

                    let starIcon = document.querySelector(`.league-card[data-league-id="${pendingFavoriteAction}"] .favorite-btn`);
                    let leagueCard = document.querySelector(`.league-card[data-league-id="${pendingFavoriteAction}"]`);

                    if (starIcon && leagueCard) {
                        starIcon.classList.toggle("active", favoriteLeagues.includes(pendingFavoriteAction));
                        leagueCard.classList.toggle("is-favorite", favoriteLeagues.includes(pendingFavoriteAction));

                        starIcon.setAttribute('title', favoriteLeagues.includes(pendingFavoriteAction) ?
                            'Remove from favorites' : 'Add to favorites');
                    }

                    showToast(
                        isFavorite ?
                            `${leagueName} removed from favorites` :
                            `${leagueName} added to favorites`,
                        'success'
                    );

                    const showFavoritesOnly = document.getElementById('show-favorites-only').classList.contains('active');
                    if (showFavoritesOnly && !favoriteLeagues.includes(pendingFavoriteAction)) {
                        leagueCard.classList.add('hidden');
                    }
                } else {
                    showToast('Failed to update favorites', 'error');
                }
            })
            .catch(error => {
                document.getElementById('loading-overlay').classList.add('hidden');
                console.error('Error toggling favorite:', error);
                showToast('Failed to update favorites', 'error');
            });

        closeModal();
    }

    function showMatches(leagueId, leagueName) {

    const leagueNameElement = document.getElementById("league-name");
    const matchContainer = document.getElementById("match-list");

    leagueNameElement.textContent = leagueName;
    document.getElementById('loading-overlay').classList.remove('hidden');
    matchContainer.innerHTML = "";

    document.querySelectorAll('.league-card').forEach(card => card.classList.remove('selected'));
    const selectedCard = document.querySelector(`.league-card[data-league-id="${leagueId}"]`);
    if (selectedCard) selectedCard.classList.add('selected');

    console.log("Fixtures Data:", fixturesData);

    setTimeout(() => {
        document.getElementById('loading-overlay').classList.add('hidden');

        const leagueIdNum = parseInt(leagueId);
        
        if (!fixturesData[leagueIdNum] || fixturesData[leagueIdNum].length === 0) {
            matchContainer.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-calendar-times fa-3x"></i>
                    <p>No matches available for this league today</p>
                </div>
            `;
            return;
        }

        const matchesHtml = fixturesData[leagueIdNum].map(fixture => {
            console.log("Fixture data:", fixture);

            const matchTime = new Date(fixture.date).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true });

            const isLive = fixture.status?.short === 'LIVE';
            const hasStarted = new Date(fixture.date) < new Date();
            const isFinished = fixture.status?.short === 'FT' || fixture.status?.long === 'Full Time';

            const homeScore = isFinished ? fixture.goals.home : null;
            const awayScore = isFinished ? fixture.goals.away : null;

            let homeWin = 'N/A', draw = 'N/A', awayWin = 'N/A';
            if (!isFinished) {
                let bet365 = fixture.odds?.bookmakers?.find(b => b.id === 8);
                if (!bet365 && fixture.odds?.bookmakers?.length > 0) bet365 = fixture.odds.bookmakers[0];

                const matchWinnerOdds = bet365?.bets?.find(bet => bet.id === 1);

                if (matchWinnerOdds?.values) {
                    homeWin = matchWinnerOdds.values.find(v => v.value === "Home" || v.value === 1)?.odd || 'N/A';
                    draw = matchWinnerOdds.values.find(v => v.value === "Draw" || v.value === 0)?.odd || 'N/A';
                    awayWin = matchWinnerOdds.values.find(v => v.value === "Away" || v.value === 2)?.odd || 'N/A';
                }

                if (currentOddsFormat !== 'decimal') {
                    homeWin = formatOdds(homeWin, currentOddsFormat);
                    draw = formatOdds(draw, currentOddsFormat);
                    awayWin = formatOdds(awayWin, currentOddsFormat);
                }
            }

            return `
                <div class='match-card ${isLive ? 'live-match' : ''} ${hasStarted ? 'started' : ''}' data-fixture-id='${fixture.id}'>
                    <div class="match-time ${isLive ? 'live' : ''}">
                        ${isLive ? `<span class="live-indicator">LIVE ${fixture.status?.elapsed}'</span>` : matchTime}
                    </div>

                    <div class="team home-team">
                        <img class="team-logo" src="${fixture.teams.home.logo}" alt="${fixture.teams.home.name}" onerror="this.src='https://via.placeholder.com/30?text=?'" />
                        <span class="team-name">${fixture.teams.home.name}</span>
                    </div>

                    <div class="match-odds-or-score">
                        ${isFinished 
                            ? `<span class="final-score">${homeScore} - ${awayScore}</span>` 
                            : `
                                <div class="odds-buttons">
                                    <button class="odd-btn" onclick="placeBet(${fixture.id}, 'home', '${homeWin}')">${homeWin}</button>
                                    <button class="odd-btn" onclick="placeBet(${fixture.id}, 'draw', '${draw}')">${draw}</button>
                                    <button class="odd-btn" onclick="placeBet(${fixture.id}, 'away', '${awayWin}')">${awayWin}</button>
                                </div>
                            `
                        }
                    </div>


                    <div class="team away-team">
                        <span class="team-name">${fixture.teams.away.name}</span>
                        <img class="team-logo" src="${fixture.teams.away.logo}" alt="${fixture.teams.away.name}" onerror="this.src='https://via.placeholder.com/30?text=?'" />
                    </div>

                    ${!isFinished ? `
                    <div class="match-actions">
                        <button class="more-odds-btn" onclick="showMoreOdds(${fixture.id})">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>` : ''}
                </div>
            `;
        }).join("");

        matchContainer.innerHTML = matchesHtml;

        currentBets.forEach(bet => highlightSelectedOdd(bet.fixtureId, bet.type));
    }, 500);
}


    function placeBet(fixtureId, type, odds) {
    if (!isUserLoggedIn) {
        showLoginModal();
        return;
    }

    const activeLeague = document.querySelector('.league-card.selected');
    if (!activeLeague) return;

    const leagueId = parseInt(activeLeague.getAttribute('data-league-id'));
    if (!fixturesData[leagueId]) return;

    const fixture = fixturesData[leagueId].find(f => f.id === fixtureId);
    if (!fixture) return;

    const existingBetIndex = currentBets.findIndex(bet => bet.fixtureId === fixtureId);

    const bet = {
        id: existingBetIndex !== -1 ? currentBets[existingBetIndex].id : Date.now(),
        fixtureId: fixtureId,
        homeTeam: fixture.teams.home.name,
        awayTeam: fixture.teams.away.name,
        type: type,
        odds: odds,
        timestamp: new Date().toISOString()
    };

    if (existingBetIndex !== -1) {
        currentBets[existingBetIndex] = bet;
    } else {
        currentBets.push(bet);
    }

    updateBetsList();
    updatePotentialWin();

    highlightSelectedOdd(fixtureId, type);

    showToast(
        `Bet ${existingBetIndex !== -1 ? 'updated' : 'added'}: ${type === 'draw' ? 'Draw' : type === 'home' ? fixture.teams.home.name + ' win' : fixture.teams.away.name + ' win'} (${odds})`,
        'success'
    );
}

    function highlightSelectedOdd(fixtureId, selectedType) {
    const matchCard = document.querySelector(`.match-card[data-fixture-id="${fixtureId}"]`);
    if (!matchCard) return;

    matchCard.querySelectorAll('.odd-btn').forEach(btn => btn.classList.remove('selected-odd'));

    const selectedButton = matchCard.querySelector(`.odd-btn[onclick*="'${selectedType}'"]`);
    if (selectedButton) selectedButton.classList.add('selected-odd');
}

    function showLoginModal() {
        if (!document.getElementById('login-modal-overlay')) {
            const loginModal = document.createElement('div');
            loginModal.className = 'modal-overlay';
            loginModal.id = 'login-modal-overlay';
            loginModal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>Login Required</h3>
                        <button class="close-modal" onclick="closeLoginModal()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>You need to be logged in to place bets.</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn-secondary" onclick="closeLoginModal()">Cancel</button>
                        <button class="btn-primary" onclick="redirectToLogin()">Login</button>
                    </div>
                </div>
            `;
            document.body.appendChild(loginModal);
        }

        document.getElementById('login-modal-overlay').classList.remove('hidden');
    }

    function closeLoginModal() {
        const modal = document.getElementById('login-modal-overlay');
        if (modal) {
            modal.classList.add('hidden');
        }
    }

    function redirectToLogin() {
        window.location.href = '/Identity/Account/Login?returnUrl=' + encodeURIComponent(window.location.pathname);
        closeLoginModal();
    }

    function updateBetsList() {
    const betsList = document.getElementById('bets-list');
    const betsFooter = document.getElementById('bets-footer');

    if (currentBets.length === 0) {
        betsList.innerHTML = `
            <div class="empty-bets">
                <i class="fas fa-ticket-alt fa-2x"></i>
                <p>No active bets</p>
            </div>
        `;
        betsFooter.classList.add('hidden');
        return;
    }

    betsFooter.classList.remove('hidden');

    let betsHtml = '';
    currentBets.forEach(bet => {
        const betTypeText = bet.type === 'home' ? '1' : bet.type === 'draw' ? 'X' : '2';
        const betDescription = `${bet.homeTeam} vs ${bet.awayTeam}`;

        betsHtml += `
            <div class="bet-item active-bet" data-bet-id="${bet.id}">
                <div class="bet-info">
                    <div class="bet-description">${betDescription}</div>
                    <div class="bet-type">${betTypeText}</div>
                    <div class="bet-odds">${bet.odds}</div>
                </div>
                <button class="remove-bet" onclick="removeBet(${bet.id})">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        `;
    });

    betsList.innerHTML = betsHtml;

    document.querySelectorAll('.match-card').forEach(card => {
        const fixtureId = parseInt(card.getAttribute('data-fixture-id'));
        if (currentBets.some(bet => bet.fixtureId === fixtureId)) {
            card.classList.add('selected-bet');
        } else {
            card.classList.remove('selected-bet');
        }
    });
}

    function removeBet(betId) {
        currentBets = currentBets.filter(bet => bet.id !== betId);
        updateBetsList();
        updatePotentialWin();
        showToast('Bet removed', 'info');
    }

    function clearAllBets() {
        if (currentBets.length === 0) return;

        currentBets = [];
        updateBetsList();
        updatePotentialWin();
        showToast('All bets cleared', 'info');
    }

    function updatePotentialWin() {
        if (currentBets.length === 0) {
            document.getElementById('potential-win').textContent = '0.00';
            return;
        }

        const stake = parseFloat(document.getElementById('total-stake').value) || 0;
        const totalOdds = currentBets.reduce((acc, bet) => acc * parseFloat(bet.odds), 1);
        const potentialWin = stake * totalOdds;

        document.getElementById('potential-win').textContent = potentialWin.toFixed(2);
    }

    function showMoreOdds(fixtureId) {
        showToast(`More betting options for match #${fixtureId}`, 'info');
    }

    function autoSelectFirstFavoriteLeague() {
        if (favoriteLeagues.length > 0) {
            const firstFavoriteLeagueId = favoriteLeagues[0];
            const firstFavoriteLeagueCard = document.querySelector(`.league-card[data-league-id="${firstFavoriteLeagueId}"]`);

            if (firstFavoriteLeagueCard) {
                const leagueName = firstFavoriteLeagueCard.getAttribute('data-league-name');
                showMatches(firstFavoriteLeagueId, leagueName);
            }
        }
    }
    function placeAllBets() {
    if (currentBets.length === 0) {
        showToast('No bets to place', 'info');
        return;
    }

    const stake = parseFloat(document.getElementById('total-stake').value) || 0;
    if (stake <= 0) {
        showToast('Enter a valid stake amount', 'error');
        return;
    }

    document.getElementById('loading-overlay').classList.remove('hidden');

    const payload = currentBets.map(bet => ({
        HomeTeam: bet.homeTeam,
        AwayTeam: bet.awayTeam,
        Type: bet.type,
        Odds: parseFloat(bet.odds),
        FixtureId: bet.fixtureId
    }));

    fetch('/Bet/PlaceBet', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
        },
        body: JSON.stringify({ bets: payload, totalStake: stake })
    })
    .then(res => res.json())
    .then(data => {
        document.getElementById('loading-overlay').classList.add('hidden');
        if (data.success) {
            showToast('Bets placed successfully!', 'success');
            currentBets = [];
            updateBetsList();
            updatePotentialWin();

            const balanceElem = document.getElementById('user-balance');
            if (balanceElem) balanceElem.textContent = data.newBalance.toFixed(2);
        } else {
            showToast(data.message, 'error');
        }
    })
    .catch(err => {
        document.getElementById('loading-overlay').classList.add('hidden');
        console.error(err);
        showToast('Error placing bets', 'error');
    });
}


    function initSearch() {
        const searchInput = document.getElementById('league-search');
        const leagueCards = document.querySelectorAll('.league-card');
        const noResults = document.getElementById('no-results');

        if (!searchInput) return;

        searchInput.addEventListener('input', function () {
            const searchTerm = this.value.toLowerCase().trim();
            let matchCount = 0;

            leagueCards.forEach(card => {
                const leagueName = card.getAttribute('data-league-name').toLowerCase();
                if (leagueName.includes(searchTerm)) {
                    card.classList.remove('hidden');
                    matchCount++;
                } else {
                    card.classList.add('hidden');
                }
            });

            if (matchCount === 0) {
                noResults.classList.remove('hidden');
            } else {
                noResults.classList.add('hidden');
            }
        });

        document.getElementById('sort-alphabetical').addEventListener('click', function () {
            const leaguesList = document.getElementById('leagues-list');
            const cards = Array.from(leaguesList.children);

            cards.sort((a, b) => {
                const nameA = a.getAttribute('data-league-name').toLowerCase();
                const nameB = b.getAttribute('data-league-name').toLowerCase();
                return nameA.localeCompare(nameB);
            });

            cards.forEach(card => leaguesList.appendChild(card));

            showToast('Leagues sorted alphabetically', 'info');
        });

        const favButton = document.getElementById('show-favorites-only');
        favButton.addEventListener('click', function () {
            this.classList.toggle('active');
            const showFavoritesOnly = this.classList.contains('active');

            leagueCards.forEach(card => {
                if (showFavoritesOnly && !card.classList.contains('is-favorite')) {
                    card.classList.add('hidden');
                } else {
                    card.classList.remove('hidden');
                }
            });

            showToast(showFavoritesOnly ? 'Showing favorites only' : 'Showing all leagues', 'info');
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        const today = new Date();
        const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
        document.getElementById('current-date').textContent = today.toLocaleDateString('en-US', options);

        currentOddsFormat = 'decimal';

        initSearch();
        autoSelectFirstFavoriteLeague();

        document.getElementById('clear-all-bets')?.addEventListener('click', clearAllBets);
        document.getElementById('total-stake')?.addEventListener('input', updatePotentialWin);
        document.getElementById('place-bet-btn')?.addEventListener('click', placeAllBets);

        document.getElementById('odds-format').addEventListener('change', function () {
            currentOddsFormat = this.value;
            const activeLeague = document.querySelector('.league-card.selected');

            if (activeLeague) {
                const leagueId = activeLeague.getAttribute('data-league-id');
                const leagueName = activeLeague.getAttribute('data-league-name');
                showMatches(leagueId, leagueName);

                showToast(`Odds format changed to ${currentOddsFormat}`, 'info');
            }
        });

        document.getElementById('refresh-matches').addEventListener('click', function () {
            const activeLeague = document.querySelector('.league-card.selected');

            if (activeLeague) {
                const leagueId = activeLeague.getAttribute('data-league-id');
                const leagueName = activeLeague.getAttribute('data-league-name');

                this.classList.add('spinning');

                setTimeout(() => {
                    showMatches(leagueId, leagueName);
                    this.classList.remove('spinning');
                    showToast('Matches refreshed', 'success');
                }, 1000);
            } else {
                showToast('Select a league first', 'info');
            }
        });
    });
</script>