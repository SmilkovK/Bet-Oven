@model SportDomain.models.LeagueMatchesViewModel
<div class="buttons">
    <button id="today-btn">Today</button>
    <button id="tomorrow-btn">Tomorrow</button>
</div>
<div class="container">
    <div class="leagues-container">
        <h2 class="section-title">Leagues</h2>
        @if (Model.Leagues != null && Model.Leagues.Any())
        {
            <ul class="leagues-list">
                @foreach (var league in Model.Leagues)
                {
                    if (Model.FixturesGroupedByLeague.ContainsKey(league.League.Id))
                    {
                        <li class="league-item" onclick="showMatches(@league.League.Id)">
                            <img src="@league.League.Logo" class="league-logo" />
                            <span class="league-name">@league.League.Name</span>
                        </li>
                    }
                }
            </ul>
        }
        else
        {
            <p>No leagues available.</p>
        }
    </div>

    <div class="matches-container">
        <h2 class="section-title">Matches</h2>
        <ul class="match-list" id="match-list">
            <!-- Matches will be populated here by JavaScript -->
        </ul>
    </div>
</div>

<script>
        function showMatches(leagueId) {
        let matchContainer = document.getElementById("match-list");
        matchContainer.innerHTML = "<p>Loading matches...</p>";

        // Use the data passed from the backend
        let fixtures = @Html.Raw(Json.Serialize(Model.FixturesGroupedByLeague));

        if (!fixtures[leagueId]) {
            matchContainer.innerHTML = "<p>No matches available for this league.</p>";
            return;
        }

        let matchesHtml = fixtures[leagueId].map(fixture => {
            // Convert UTC date to local time
            const matchTime = new Date(fixture.date).toLocaleTimeString([], {
                hour: '2-digit',
                minute: '2-digit',
                hour12: true // Use 12-hour format (e.g., 3:00 PM)
            });

            // Find the "Match Winner" odds from Bet365
            let bet365 = fixture.odds?.bookmakers?.find(b => b.name === "Bet365");
            let matchWinnerOdds = bet365?.bets?.find(bet => bet.name === "Match Winner");

            // Extract home, draw, and away odds
            let homeWin = matchWinnerOdds?.values?.find(v => v.value === "Home")?.odd ?? 'N/A';
            let draw = matchWinnerOdds?.values?.find(v => v.value === "Draw")?.odd ?? 'N/A';
            let awayWin = matchWinnerOdds?.values?.find(v => v.value === "Away")?.odd ?? 'N/A';

            return `
                <div class='match-row'>
                    <span class="match-time">${matchTime}</span>
                    <img class="team-logo" src="${fixture.teams.home.logo}" alt="Home Logo" onerror="this.style.display='none'" />
                    <span class="team-name">${fixture.teams.home.name}</span>
                    <span class="odds">${homeWin}</span>
                    <span class="odds">${draw}</span>
                    <span class="odds">${awayWin}</span>
                    <span class="team-name">${fixture.teams.away.name}</span>
                    <img class="team-logo" src="${fixture.teams.away.logo}" alt="Away Logo" onerror="this.style.display='none'" />
                </div>
            `;
        }).join("");

        matchContainer.innerHTML = matchesHtml;
    }
</script>

<style>
    .container {
        display: flex;
        height: 100vh; /* Full screen height */
        width: 100vw; 
        flex-direction: row;
        align-items: flex-start; /* Prevents stretching */
    }


    .leagues-container {
        width: 20%; /* Takes up 25% */
        height: 100vh; /* Full screen height */
        overflow-y: auto;
        border-right: 2px solid #ddd;
        padding: 10px;
        color: white;
        background-color: #1e1e2d; /* Dark background */
    }

    .league-item {
        padding: 12px;
        margin-bottom: 5px;
        border-radius: 5px;
        transition: background 0.3s;
    }

        .league-item:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

    .league-logo {
        width: 30px;
        height: 30px;
        margin-right: 10px;
    }

    .matches-container {
        width: 80%;
        height: 100vh;
        padding: 20px;
        overflow-y: auto;
        background-color: #2b2b3d;
        color: white;
        display: flex;
        flex-direction: column;
        align-items: center; /* Center content */
        justify-content: flex-start;
    }

    .match-row {
        display: flex;
        align-items: center;
        justify-content: space-between;
        background-color: #25253A;
        color: white;
        padding: 10px;
        border-radius: 5px;
        margin: 5px 0;
        width: 90%;
        gap: 10px;
    }

    .team-logo {
        width: 30px;
        height: 30px;
    }

    .team-name {
        flex: 1; /* Takes equal space */
        text-align: center;
        font-weight: bold;
    }

    .odds {
        width: 50px;
        text-align: center;
        background: #444;
        padding: 5px;
        border-radius: 5px;
    }

    .match-item {
        padding: 12px;
        margin-bottom: 5px;
        border-radius: 5px;
        transition: background 0.3s;
    }

</style>
