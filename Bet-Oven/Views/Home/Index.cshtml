@model SportDomain.models.LeagueMatchesViewModel
<div class="buttons">
    <button id="today-btn">Today</button>
    <button id="tomorrow-btn">Tomorrow</button>
</div>
<div class="container">
    <div class="leagues-container">
        <h2 class="section-title">Leagues</h2>
        @if (Model.Leagues != null && Model.Leagues.Any())
        {
            <div class="leagues-list" id="leagues-list">
                @foreach (var league in Model.Leagues)
                {
                    if (Model.FixturesGroupedByLeague.ContainsKey(league.League.Id))
                    {
                        <div class="league-item" onclick="showMatches(@league.League.Id, '@Html.Raw(league.League.Name)')" data-league-id="@league.League.Id">
                            <img src="@league.League.Logo" class="league-logo" />
                            <span class="league-name">@league.League.Name</span>
                            <span class="star-icon @(Model.FavoriteLeagues.Contains(league.League.Id) ? "favorited" : "")"
                                  onclick="toggleFavorite(event, @league.League.Id)">&#9733;</span>
                        </div>
                    }
                }
            </div>
        }
        else
        {
            <p>No leagues available.</p>
        }
    </div>

    <div class="matches-container">
        <h2 class="section-title" id="league-name">Select a league to view matches</h2>
        <ul class="match-list" id="match-list"></ul>
    </div>
</div>

<div id="popup" class="popup hidden">
    <p id="popup-text"></p>
    <button onclick="confirmFavorite(true)">Yes</button>
    <button onclick="confirmFavorite(false)">No</button>
</div>

<script>
    let favoriteLeagues = @Html.Raw(Json.Serialize(Model.FavoriteLeagues));
    let pendingFavoriteAction = null;

    // Your original showMatches function
    function showMatches(leagueId, leagueName) {
        console.log("League ID:", leagueId);
        console.log("League Name:", leagueName);

        let leagueNameElement = document.getElementById("league-name");
        let matchContainer = document.getElementById("match-list");

        leagueNameElement.textContent = leagueName;

        matchContainer.innerHTML = "<p>Loading matches...</p>";

        let fixtures = @Html.Raw(Json.Serialize(Model.FixturesGroupedByLeague));

        if (!fixtures[leagueId]) {
            matchContainer.innerHTML = "<p>No matches available for this league.</p>";
            return;
        }

        let matchesHtml = fixtures[leagueId].map(fixture => {
            const matchTime = new Date(fixture.date).toLocaleTimeString([], {
                hour: '2-digit',
                minute: '2-digit',
                hour12: true
            });

            let bet365 = fixture.odds?.bookmakers?.find(b => b.id === '8');
            let matchWinnerOdds = bet365?.bets?.find(bet => bet.id === '1');

            let homeWin = matchWinnerOdds?.values?.find(v => v.value === "Home")?.odd ?? 'N/A';
            let draw = matchWinnerOdds?.values?.find(v => v.value === "Draw")?.odd ?? 'N/A';
            let awayWin = matchWinnerOdds?.values?.find(v => v.value === "Away")?.odd ?? 'N/A';

            return `
                <div class='match-row'>
                    <span class="match-time">${matchTime}</span>
                    <img class="team-logo" src="${fixture.teams.home.logo}" alt="Home Logo" onerror="this.style.display='none'" />
                    <span class="team-name">${fixture.teams.home.name}</span>
                    <span class="odds">${homeWin}</span>
                    <span class="odds">${draw}</span>
                    <span class="odds">${awayWin}</span>
                    <span class="team-name">${fixture.teams.away.name}</span>
                    <img class="team-logo" src="${fixture.teams.away.logo}" alt="Away Logo" onerror="this.style.display='none'" />
                </div>
            `;
        }).join("");

        matchContainer.innerHTML = matchesHtml;
    }

    // New favorite functionality
    function toggleFavorite(event, leagueId) {
        event.stopPropagation(); // Prevent the league-item click event from firing
        pendingFavoriteAction = leagueId;
        let isFavorite = favoriteLeagues.includes(leagueId);
        document.getElementById("popup-text").textContent = isFavorite ?
            "Are you sure you want to remove this league from favorites?" :
            "Are you sure you want to add this league to favorites?";
        document.getElementById("popup").classList.remove("hidden");
    }

        function confirmFavorite(confirmed) {
        if (!confirmed || pendingFavoriteAction === null) {
            document.getElementById("popup").classList.add("hidden");
            return;
        }

        fetch(`/ToggleFavorite?leagueId=${pendingFavoriteAction}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                console.log("Favorite leagues updated:", data.favoriteLeagues);
                favoriteLeagues = data.favoriteLeagues;

                // Update the star icon for the toggled league
                let starIcon = document.querySelector(`.league-item[data-league-id="${pendingFavoriteAction}"] .star-icon`);
                if (starIcon) {
                    starIcon.classList.toggle("favorited", data.favoriteLeagues.includes(pendingFavoriteAction));
                }
            }
        })
        .catch(error => {
            console.error('Error toggling favorite:', error);
        });

        document.getElementById("popup").classList.add("hidden");
    }
</script>

<style>
    body {
        margin: 0;
        font-family: Arial, sans-serif;
        background-color: #1e1e2d; 
        color: white;
    }
    .container {
        display: flex;
        height: 100vh;
        width: 100vw; 
        flex-direction: row;
        align-items: flex-start;
    }


    .leagues-container {
        width: 25%; 
        height: 100vh; 
        overflow-y: auto;
        border-right: 2px solid #ddd;
        padding: 10px;
        color: white;
        background-color: #1e1e2d; 
    }

    .league-item {
        padding: 12px;
        margin-bottom: 5px;
        border-radius: 5px;
        transition: background 0.3s;
    }

        .league-item:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

    .league-logo {
        width: 30px;
        height: 30px;
        margin-right: 10px;
    }

    .matches-container {
        width: 80%;
        height: 100vh;
        padding: 20px;
        overflow-y: auto;
        background-color: #2b2b3d;
        color: white;
        display: flex;
        flex-direction: column;
        align-items: center; 
        justify-content: flex-start;
    }

    .match-row {
        display: flex;
        align-items: center;
        justify-content: space-between;
        background-color: #25253A;
        color: white;
        padding: 10px;
        border-radius: 5px;
        margin: 5px 0;
        width: 90%;
        gap: 10px;
    }

    .team-logo {
        width: 30px;
        height: 30px;
    }

    .team-name {
        flex: 1; 
        text-align: center;
        font-weight: bold;
    }

    .odds {
        width: 50px;
        text-align: center;
        background: #444;
        padding: 5px;
        border-radius: 5px;
    }

    .match-item {
        padding: 12px;
        margin-bottom: 5px;
        border-radius: 5px;
        transition: background 0.3s;
    }

    .star-icon {
        cursor: pointer;
        margin-left: 10px;
        color: transparent;
        text-shadow: 0 0 0 white;
        opacity: 0;
        float: right;
    }

    .league-item:hover .star-icon {
        color: white;
        transition: 0.5s;
        opacity: 100%;
    }

    .favorited {
        color: yellow !important;
        opacity: 100%;
        text-shadow: none;
    }

    .popup {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: white;
        padding: 20px;
        border-radius: 10px;
        color: black;
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

        .popup.hidden {
            display: none;
        }
</style>
